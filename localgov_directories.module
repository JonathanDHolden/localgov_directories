<?php

/**
 * @file
 * Provides a directory facets entity type.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Render\Element;
use Drupal\field\FieldConfigInterface;
use Drupal\localgov_directories\DirectoryExtraFieldDisplay;
use Drupal\node\NodeInterface;
use Drupal\pathauto\Entity\PathautoPattern;
use Drupal\search_api\Entity\Index;

/**
 * Implements hook_theme().
 */
function localgov_directories_theme() {
  return [
    'localgov_directories_facets' => [
      'render element' => 'elements',
    ],
    'facets_item_list__links__localgov_directories_facets' => [
      'base hook' => 'facets_item_list',
    ],
  ];
}

/**
 * Implements hook_modules_installed().
 */
function localgov_directories_modules_installed($modules) {
  $services = in_array('localgov_services_navigation', $modules);
  if ($services) {
    \Drupal::service('config.installer')->installOptionalConfig();
    localgov_directories_optional_fields_settings($services);
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function localgov_directories_entity_extra_field_info() {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(DirectoryExtraFieldDisplay::class)
    ->entityExtraFieldInfo();
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function localgov_directories_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(DirectoryExtraFieldDisplay::class)
    ->nodeView($build, $node, $display, $view_mode);
}

/**
 * Implements hook_pathauto_pattern_alter().
 */
function localgov_directories_pathauto_pattern_alter(PathautoPattern $pattern, array $context) {
  // If pathauto isn't set to include this entity into directory, but
  // it has opt-ed in with the field add the (optional) parent to the path.
  $entity = reset($context['data']);
  assert($entity instanceof ContentEntityInterface);
  if ($entity->hasField('localgov_directory_channels') && strpos($pattern->getPattern(), '[node:localgov_directory_channels:0:entity:url:relative]') === FALSE) {
    $pattern->setPattern('[node:localgov_directory_channels:0:entity:url:relative]/' . $pattern->getPattern());
  }
}

/**
 * Set form settings for optional services and topic fields on installation.
 *
 * @param bool $services
 *   If localgov_services is (being) installed.
 */
function localgov_directories_optional_fields_settings($services) {
  $properties = [
    'targetEntityType' => 'node',
    'bundle' => 'localgov_directory',
  ];
  if ($form_displays = \Drupal::entityTypeManager()->getStorage('entity_form_display')->loadByProperties($properties)) {
    foreach ($form_displays as $form_display) {
      assert($form_display instanceof EntityFormDisplayInterface);
      if ($services && !$form_display->getComponent('localgov_services_parent')) {
        $form_display->setComponent('localgov_services_parent', [
          'type' => 'entity_reference_autocomplete',
          'region' => 'content',
          'settings' => [
            'match_operator' => 'CONTAINS',
            'size' => '60',
            'placeholder' => '',
            'match_limit' => 10,
          ],
          'weight' => 51,
        ])->save();
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function localgov_directories_field_config_insert(FieldConfigInterface $field) {
  // If a content type can be added to a directory channel add it to the index.
  //
  // While search_api could index more entity types to extend will require
  // updating fields, and aggregating the facet ones. Only 'node' updated here
  // for now.
  if (
    $field->getName() == 'localgov_directory_channels' &&
    $field->getTargetEntityTypeId() == 'node' &&
    ($index = Index::load('localgov_directories_index_default'))
  ) {
    $entity_type_id = 'node';
    $entity_bundle = $field->getTargetBundle();

    $index = Index::load('localgov_directories_index_default');
    $datasource = $index->getDatasource('entity:' . $entity_type_id);
    if (!$datasource) {
      // If the content:node datasource has been lost so have the fields most
      // probably and it's more of a mess. But leaving this here anyway.
      $pluginHelper = \Drupal::service('search_api.plugin_helper');
      $datasource = $pluginHelper->createDatasourcePlugins($index, 'entity:' . $entity_type_id);
    }
    if (!$datasource) {
      \Drupal::messenger()->addMessage(t('Failed to update the directories search index with new bundle'), MessengerInterface::TYPE_ERROR);
      return;
    }

    $configuration = $datasource->getConfiguration();
    $configuration['bundles']['default'] = FALSE;
    if (!in_array($entity_bundle, $configuration['bundles']['selected'])) {
      $configuration['bundles']['selected'][] = $entity_bundle;
    }
    $datasource->setConfiguration($configuration);

    $field = $index->getField('rendered_item');
    if ($field) {
      $configuration = $field->getConfiguration();
      $configuration['view_mode']['entity:node'][$entity_bundle] = 'directory_index';
      $field->setConfiguration($configuration);
    }

    $index->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function localgov_directories_field_config_delete(FieldConfigInterface $field) {
  // If a content type can no longer be added to a directory channel remove
  // from index.
  if (
    $field->getName() == 'localgov_directory_channels' &&
    $field->getTargetEntityTypeId() == 'node' &&
    ($index = Index::load('localgov_directories_index_default'))
  ) {
    $entity_type_id = 'node';
    $entity_bundle = $field->getTargetBundle();

    $index = Index::load('localgov_directories_index_default');
    $datasource = $index->getDatasource('entity:' . $entity_type_id);
    if (!$datasource) {
      return;
    }

    $configuration = $datasource->getConfiguration();
    $configuration['bundles']['default'] = FALSE;
    if (($key = array_search($entity_bundle, $configuration['bundles']['selected'])) !== FALSE) {
      unset($configuration['bundles']['selected'][$key]);
    }
    $datasource->setConfiguration($configuration);
    $index->save();
  }
}

/**
 * Implements theme preprocess_facets_item_list().
 *
 * @see facets_preprocess_facets_item_list()
 */
function localgov_directories_preprocess_facets_item_list(array &$variables) {
  if ($variables['facet']->id() == 'localgov_directories_facets') {
    \Drupal::service('class_resolver')
      ->getInstanceFromDefinition(DirectoryExtraFieldDisplay::class)
      ->preprocessFacetList($variables);
  }

}

/**
 * Prepares variables for directory facets templates.
 *
 * Default template: localgov-directories-facets.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the directory facets
 *     information and any fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_localgov_directories_facets(array &$variables) {
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
